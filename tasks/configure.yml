# tasks file
---
- name: configure | copy certificate files
  ansible.builtin.copy:
    src: "{{ item.value.src }}"
    dest: "{{ item.value.dest }}"
    owner: "{{ item.value.owner | default('root') }}"
    group: "{{ item.value.group | default('mysql') }}"
    mode: "{{ item.value.mode | default('0640') }}"
  with_dict: "{{ percona_server_ssl_map }}"
  notify: restart percona-server
  tags:
    - percona-server-configure-copy-certificate-files

- name: configure | service
  when: _mysqld_installed.rc != 0
  tags:
    - percona-server-configure-first-run
  block:
    - name: configure | service | stop
      ansible.builtin.service:
        name: mysql
        state: stopped
      tags:
        - percona-server-configure-first-run-service-stop

    - name: configure | remove (excessive) configuration files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /etc/mysql/percona-server.cnf
        - /etc/mysql/percona-server.conf.d
      tags:
        - percona-server-configure-first-run-cleanup

- name: configure | update (global) configuration file
  ansible.builtin.template:
    src: "{{ percona_server_etc_mysql_my_cnf.lstrip('/') }}.j2"
    dest: "{{ percona_server_etc_mysql_my_cnf }}"
    owner: root
    group: root
    mode: 0644
  notify: restart percona-server
  tags:
    - percona-server-configure-global-my-cnf

- name: configure | service
  when: _mysqld_installed.rc != 0
  tags:
    - percona-server-configure-first-run
  block:
    - name: configure | service | start
      ansible.builtin.service:
        name: mysql
        state: started
      tags:
        - percona-server-configure-first-run-service-start

- name: configure | update (root) configuration file
  ansible.builtin.template:
    src: root/.my.cnf.j2
    dest: '~root/.my.cnf'
    owner: root
    group: root
    mode: 0600
  when: percona_server_user_root_cnf_manage
  tags:
    - percona-server-configure-root-my-cnf
